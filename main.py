from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Access environment variables as if they came from the actual environment
TOKEN = os.getenv('TOKEN')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëãüéâ –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –í–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤üõí.\n\n"
        " \t–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:\n"
        "–ù–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏ –¢–æ–≤–∞—Ä\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –º–æ–¥–µ–ª—å, —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ!üöÄ"
    )
    keyboard = [
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –¢–æ–≤–∞—Ä", callback_data='choose_stores')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data='info')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text=welcome_message, reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
def create_store_keyboard(selected_stores):
    store_keyboard = []
    for i in range(1, 4):
        store_name = f"–ú–∞–≥–∞–∑–∏–Ω {i}"
        button_text = f"‚úÖ {store_name}" if store_name in selected_stores else store_name
        store_keyboard.append([InlineKeyboardButton(button_text, callback_data=f'store{i}')])

    store_keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data='finish_selection')])
    return InlineKeyboardMarkup(store_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
async def choose_stores(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['selected_stores'] = set()
    store_reply_markup = create_store_keyboard(context.user_data['selected_stores'])
    await update.callback_query.edit_message_text(text="–í—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", reply_markup=store_reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async def select_store(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    store_name = f"–ú–∞–≥–∞–∑–∏–Ω {query.data[-1]}"
    selected_stores = context.user_data['selected_stores']

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if store_name in selected_stores:
        selected_stores.remove(store_name)
    else:
        selected_stores.add(store_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    store_reply_markup = create_store_keyboard(selected_stores)
    await query.edit_message_text(text="–í—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", reply_markup=store_reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
async def finish_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    selected_stores = context.user_data.get('selected_stores', list())

    if selected_stores:
        stores_list = ', '.join(selected_stores)
        await update.callback_query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã: {stores_list}\n"
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ú–∞—Ä–∫–∞\n–ú–æ–¥–µ–ª—å\n–¶–µ–Ω–∞.")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        context.user_data['awaiting_product_name'] = True
    else:
        await update.callback_query.edit_message_text(text="–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")


async def handle_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('awaiting_product_name'):
        product_info = update.message.text
        product_info_split = product_info.split('\n')
        product_text = f"–ú–∞—Ä–∫–∞: {product_info_split[0]}\n" \
                       f"–ú–æ–¥–µ–ª—å: {product_info_split[1]}\n" \
                       f"–¶–µ–Ω–∞: {product_info_split[2]}."

        await update.message.reply_text(f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä:\n{product_text}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['awaiting_product_name'] = False
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

    if query.data == 'choose_stores':
        await choose_stores(update, context)
    elif query.data.startswith('store'):
        await select_store(update, context)
    elif query.data == 'finish_selection':
        await finish_selection(update, context)
    elif query.data == 'help':
        await query.edit_message_text(text="–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start.")
    elif query.data == 'info':
        await query.edit_message_text(text="–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_name))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
