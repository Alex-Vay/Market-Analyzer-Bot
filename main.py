import asyncio
import concurrent.futures
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv
import os
from parsers.ozon import ozon_parser
from parsers.wb import wb_parser
from parsers.yandex import ya_parser
from parsers.mvideo import mvideo
from parsers.dns import dns_parser

# from parsers.aliexpress import ali_parser

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Access environment variables as if they came from the actual environment
TOKEN = os.getenv('TOKEN')

STORES = ['Ozon', 'Wildberries', '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç', 'Mvideo', 'DNS']  # 'AliExpress'
PARSERS = {'Ozon': ozon_parser.get_product,
           'Wildberries': wb_parser.get_product,
           '–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç': ya_parser.get_product,
           'Mvideo': mvideo.get_data_mvideo,
           'DNS': dns_parser.get_product,
           # 'AliExpress': ali_parser.get_product
           }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ update –∏ context
    global current_update, current_context
    current_update = update
    current_context = context
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëãüéâ –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –í–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤üõí.\n\n"
        " \t–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:\n"
        "–ù–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏ –¢–æ–≤–∞—Ä\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –º–æ–¥–µ–ª—å, —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ!üöÄ"
    )
    keyboard = [
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –¢–æ–≤–∞—Ä", callback_data='choose_stores')],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data='info')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text=welcome_message, reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
def create_store_keyboard(selected_stores):
    store_keyboard = []
    for i in range(len(STORES)):
        store_name = STORES[i]
        button_text = f"‚úÖ {store_name}" if store_name in selected_stores else store_name
        store_keyboard.append([InlineKeyboardButton(button_text, callback_data=f'store{i}')])

    store_keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data='finish_selection')])
    return InlineKeyboardMarkup(store_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
async def choose_stores(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['selected_stores'] = set()
    store_reply_markup = create_store_keyboard(context.user_data['selected_stores'])
    await update.callback_query.edit_message_text(text="–í—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", reply_markup=store_reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async def select_store(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    store_name = STORES[int(query.data[-1])]
    selected_stores = context.user_data['selected_stores']
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if store_name in selected_stores:
        selected_stores.remove(store_name)
    else:
        selected_stores.add(store_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    store_reply_markup = create_store_keyboard(selected_stores)
    await query.edit_message_text(text="–í—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", reply_markup=store_reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
async def finish_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    selected_stores = context.user_data.get('selected_stores', list())

    if selected_stores:
        stores_list = ', '.join(selected_stores)
        await update.callback_query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã: {stores_list}\n"
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¢–æ–≤–∞—Ä (—Ç–∏–ø, –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, —Ü–≤–µ—Ç –∏ –¥—Ä.)")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        context.user_data['awaiting_product_name'] = True
        context.user_data['stores_list'] = selected_stores
    else:
        await update.message.reply_text(text="–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞./start")


async def handle_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('awaiting_product_name'):
        product_info = update.message.text
        stores_list = context.user_data.get('stores_list', '')
        stores_str = ', '.join(stores_list)
        product_text = f"<b>–¢–æ–≤–∞—Ä</b>: {product_info}\n"
        keyboard = [
            [InlineKeyboardButton("–î–∞, –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!", callback_data='start_search')],
            [InlineKeyboardButton("–ù–µ—Ç, —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ", callback_data='enter_again')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text=f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ:\n"
                                             f"{product_text}\n"
                                             f"<b>–ú–∞–≥–∞–∑–∏–Ω—ã:</b> {stores_str}\n"
                                             f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫?</b>",
                                        reply_markup=reply_markup,
                                        parse_mode='html')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['awaiting_product_name'] = False
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        context.user_data['product_info'] = product_info

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã.")


async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    product_search = context.user_data.pop('product_info', '')
    stores_list = context.user_data.get('stores_list', [])
    results = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=6) as executor:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        future_to_store = {executor.submit(PARSERS.get(store),
                                           product_search): store
                           for store in stores_list}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for future in concurrent.futures.as_completed(future_to_store):
            store = future_to_store[future]
            try:
                result = future.result()
                results.append(result)
            except Exception as exc:
                print(f'{store} generated an exception: {exc}')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = ""
        results = filter(lambda x: x is not None, results)
        for product in sorted(results, key=lambda x: int(x[1])):
            subtext = f'<a href="{product[3]}">{product[0]}</a>\n' \
                      f'<b>–¶–µ–Ω–∞ (‚ÇΩ)</b>: {product[1]}\n' \
                      f'<b>–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥</b>: {product[2]}\n\n'

            text += subtext
        keyboard = [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä", callback_data='finish_selection')],
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å(—ã) –∏ —Ç–æ–≤–∞—Ä", callback_data='enter_again')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text=text,
                                                      reply_markup=reply_markup,
                                                      parse_mode='html')


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

    if query.data == 'choose_stores':
        await choose_stores(update, context)
    elif query.data.startswith('store'):
        await select_store(update, context)
    elif query.data == 'finish_selection':
        await finish_selection(update, context)
    elif query.data == 'info':
        await query.edit_message_text(text="–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n–ù–∞–∂–º–∏—Ç–µ /start")
    elif query.data == 'start_search':
        await start_search(update, context)
    elif query.data == 'enter_again':
        await choose_stores(update, context)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤
    elif query.data == 'start':
        await start(current_update, current_context)


def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_name))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
